#!/usr/bin/env python
# Originally modified from A. Israel's script seen at
# https://gist.github.com/aisrael/b2b78d9dfdd176a232b9
"""To run this script first install the dependencies


  virtualenv v
  source v/bin/activate
  pip install githubpy GitPython requests

Generate a github access token; this is needed as the anonymous access
to Github's API will easily hit the limit even with a single invocation.
For details see:
https://help.github.com/articles/creating-an-access-token-for-command-line-use/

Next either set the github token as an env variable
`GITHUB_ACCESS_TOKEN` or alternatively invoke the script with
`--token` switch.

Example:

  ceph-release-notes -r tags/v0.87..origin/giant $(git rev-parse --show-toplevel)

"""

from __future__ import print_function
import argparse
import github
import os
import re
import sys
import requests

from git import Repo


merge_re = re.compile("Merge pull request #(\d+).*")
fixes_re = re.compile(r"Fixes\:? #(\d+)")
tracker_re = re.compile("http://tracker.ceph.com/issues/(\d+)")
signed_off_re = re.compile("Signed-off-by: (.+) <")
tracker_uri = "http://tracker.ceph.com/issues/{0}.json"

def make_release_notes(gh, repo, ref, plaintext,original_issue):

    issue2prs = {}

    for commit in repo.iter_commits(ref):
        merge = merge_re.match(commit.summary)
        if merge:
            issue = ''
            number = merge.group(1)
            pr = gh.repos("ceph")("ceph").pulls(number).get()
            # We are not handling multiple issues here yet
            if pr['body']:
                fixes = fixes_re.findall(pr['body'])
                tracker = tracker_re.findall(pr['body'])
                if tracker:
                    issue = ','.join(tracker)
                elif fixes:
                    issue = ','.join(fixes)

            if not issue:
                print ("ERROR: http://github.com/ceph/ceph/pull/" + str(number) + " has no associated issue")
                continue    

            if original_issue:
                r = requests.get(tracker_uri.format(issue),params={"include":"relations"})

                # Verify that we are indeed looking at a backports issue
                if r.json()["issue"]["tracker"]["name"] != "Backport":
                    continue

                # Now we can get an original issue only if the
                # relations field is populated, otherwise we fallback
                # to the tracker number
                try:
                    relations = r.json()["issue"]["relations"]
                except KeyError:
                    continue
                related_issues = [str(i['issue_id']) for i in relations if i["relation_type"] == "copied_to"]
                if related_issues:
                    issue = ','.join(related_issues)

            title = pr['title']

            title_re = '^(cli|common|mon|osd|fs|librbd|rbd|fs|mds|objecter|rgw|build/ops|tests|tools|doc|crush|librados):'
            if not re.match(title_re, title):
                print ("ERROR: http://github.com/ceph/ceph/pull/" + str(number) + " title " + title + " does not match " + title_re)
            # Big assumption, do a sanity check in the end, we are
            # getting the author of final merge commit
            author = commit.parents[-1].author.name
            issue2prs.setdefault(issue, []).append((author, title, number))
            sys.stdout.write('.')

    print (" done collecting merges.")

    for (issue, prs) in issue2prs.iteritems():
        if len(prs) > 1:
            print (">>>>>>> " + str(len(prs)) + " pr for issue " + issue)
        for (author, title, number) in prs:
            if plaintext:
                print (u"* {title} (#{issue}, {author})".format(title=title, issue=issue, author=author))
            else:
                print (u"* {title} (`issue#{issue} <http://tracker.ceph.com/issues/{issue}>`_, `pr#{number} <http://github.com/ceph/ceph/pull/{number}>`_, {author})".format(title=title, issue=issue, author=author, number=number))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--rev", "-r",
                        help="git revision range for creating release notes")
    parser.add_argument("--text", "-t",
                        action='store_true', default=None,
                        help="output plain text only, no links")
    parser.add_argument("repo", metavar="repo",
                        help="path to ceph git repo")
    parser.add_argument("--token", default=os.getenv("GITHUB_ACCESS_TOKEN"),
                        help="Github Access Token ($GITHUB_ACCESS_TOKEN otherwise)")
    parser.add_argument("--original_issue", dest='original_issue', action='store_true',
                        help="When the issue id is a backport, use original upstream issue id instead (default)")
    parser.add_argument("--no_original_issue", dest='original_issue', action='store_false',
                        help="When the issue id is a backport, don't use original upstream issue id instead")
    parser.set_defaults(original_issue=True)

    args = parser.parse_args()
    gh = github.GitHub(
        access_token=args.token)

    make_release_notes(gh, Repo(args.repo), args.rev, args.text, args.original_issue)
